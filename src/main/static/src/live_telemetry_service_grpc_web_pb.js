/**
 * @fileoverview gRPC-Web generated client stub for me.williamhester.kdash.enduranceweb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.4
// source: live_telemetry_service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.me = {};
proto.me.williamhester = {};
proto.me.williamhester.kdash = {};
proto.me.williamhester.kdash.enduranceweb = require('./live_telemetry_service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.MonitorTelemetryRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.TelemetryData>}
 */
const methodDescriptor_LiveTelemetryService_MonitorTelemetry = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorTelemetry',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.MonitorTelemetryRequest,
  proto.me.williamhester.kdash.enduranceweb.TelemetryData,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.MonitorTelemetryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.TelemetryData.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.MonitorTelemetryRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.TelemetryData>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorTelemetry =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorTelemetry',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorTelemetry);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.MonitorTelemetryRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.TelemetryData>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorTelemetry =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorTelemetry',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorTelemetry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.LapData>}
 */
const methodDescriptor_LiveTelemetryService_MonitorLaps = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorLaps',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.LapData,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.LapData.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.LapData>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorLaps);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.LapData>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorLaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.LapEntry>}
 */
const methodDescriptor_LiveTelemetryService_MonitorDriverLaps = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverLaps',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.LapEntry,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.LapEntry.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.LapEntry>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorDriverLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorDriverLaps);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.LapEntry>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorDriverLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorDriverLaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.OtherCarLapEntry>}
 */
const methodDescriptor_LiveTelemetryService_MonitorOtherCarsLaps = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorOtherCarsLaps',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.OtherCarLapEntry,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.OtherCarLapEntry.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.OtherCarLapEntry>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorOtherCarsLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorOtherCarsLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorOtherCarsLaps);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.OtherCarLapEntry>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorOtherCarsLaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorOtherCarsLaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorOtherCarsLaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.Gaps>}
 */
const methodDescriptor_LiveTelemetryService_MonitorCurrentGaps = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentGaps',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.Gaps,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.Gaps.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.Gaps>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorCurrentGaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentGaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorCurrentGaps);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.Gaps>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorCurrentGaps =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentGaps',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorCurrentGaps);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.CurrentDrivers>}
 */
const methodDescriptor_LiveTelemetryService_MonitorCurrentDrivers = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentDrivers',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.CurrentDrivers,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.CurrentDrivers.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.CurrentDrivers>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorCurrentDrivers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentDrivers',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorCurrentDrivers);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.CurrentDrivers>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorCurrentDrivers =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorCurrentDrivers',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorCurrentDrivers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.DriverDistances>}
 */
const methodDescriptor_LiveTelemetryService_MonitorDriverDistances = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverDistances',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.DriverDistances,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.DriverDistances.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.DriverDistances>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorDriverDistances =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverDistances',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorDriverDistances);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.DriverDistances>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorDriverDistances =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorDriverDistances',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorDriverDistances);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
 *   !proto.me.williamhester.kdash.enduranceweb.DriverFuelLevel>}
 */
const methodDescriptor_LiveTelemetryService_MonitorFuelLevel = new grpc.web.MethodDescriptor(
  '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorFuelLevel',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.me.williamhester.kdash.enduranceweb.ConnectRequest,
  proto.me.williamhester.kdash.enduranceweb.DriverFuelLevel,
  /**
   * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.me.williamhester.kdash.enduranceweb.DriverFuelLevel.deserializeBinary
);


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.DriverFuelLevel>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServiceClient.prototype.monitorFuelLevel =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorFuelLevel',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorFuelLevel);
};


/**
 * @param {!proto.me.williamhester.kdash.enduranceweb.ConnectRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.me.williamhester.kdash.enduranceweb.DriverFuelLevel>}
 *     The XHR Node Readable Stream
 */
proto.me.williamhester.kdash.enduranceweb.LiveTelemetryServicePromiseClient.prototype.monitorFuelLevel =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/me.williamhester.kdash.enduranceweb.LiveTelemetryService/MonitorFuelLevel',
      request,
      metadata || {},
      methodDescriptor_LiveTelemetryService_MonitorFuelLevel);
};


module.exports = proto.me.williamhester.kdash.enduranceweb;

